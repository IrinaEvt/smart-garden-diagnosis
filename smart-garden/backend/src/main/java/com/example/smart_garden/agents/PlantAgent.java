package com.example.smart_garden.agents;

import com.example.smart_garden.config.SpringContextBridge;
import com.example.smart_garden.entities.PlantEntity;
import com.example.smart_garden.ontology.PlantOntology;
import com.example.smart_garden.service.AgentManagerService;
import com.example.smart_garden.service.PlantService;
import com.example.smart_garden.service.ReasoningBlock;
import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.core.behaviours.OneShotBehaviour;
import jade.lang.acl.ACLMessage;

import java.util.*;
import java.util.stream.Collectors;

public class PlantAgent extends Agent {

    private PlantOntology ontology;
    private String plantName;
    private String plantType;
    private Long plantId;

    private List<ReasoningBlock> latestAdvice = new ArrayList<>();
    private volatile boolean reasoningCompleted = false;
    private volatile boolean externalRiskDetected = false;

    public boolean isReasoningCompleted() {
        return reasoningCompleted;
    }

    public void resetReasoningFlag() {
        this.reasoningCompleted = false;
    }

    @Override
    protected void setup() {
        Object[] args = getArguments();
        if (args == null || args.length < 3) {
            System.err.println("‚ùå PlantAgent: –õ–∏–ø—Å–≤–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (ID, –∏–º–µ –∏ —Ç–∏–ø)!");
            doDelete();
            return;
        }

        this.plantId = (Long) args[0];
        this.plantName = (String) args[1];
        this.plantType = (String) args[2];

        this.ontology = SpringContextBridge.getBean(PlantOntology.class);

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ AgentManager
        AgentManagerService manager = SpringContextBridge.getBean(AgentManagerService.class);
        manager.registerPlantAgent(plantName, this);

        System.out.println("‚úÖ PlantAgent —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ: " + plantName);

        // –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–µ–Ω reasoning
        addBehaviour(new OneShotBehaviour() {
            @Override
            public void action() {
                runReasoning();
            }
        });

        // –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Ä–∏—Å–∫–æ–≤–∏ —Å—ä–æ–±—â–µ–Ω–∏—è
        addBehaviour(new CyclicBehaviour() {
            @Override
            public void action() {
                ACLMessage msg = receive();
                if (msg != null) {
                    if ("RISK_PRESENT".equals(msg.getContent())) {
                        externalRiskDetected = true;
                        System.out.println("‚ö†Ô∏è PlantAgent " + plantName + ": –ø–æ–ª—É—á–µ–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –≤—ä–Ω—à–µ–Ω —Ä–∏—Å–∫.");
                    }
                } else {
                    block();
                }
            }
        });
    }

    @Override
    protected void takeDown() {
        SpringContextBridge.getBean(AgentManagerService.class).unregisterPlantAgent(plantName);
        System.out.println("üõë PlantAgent –∑–∞ " + plantName + " –ø—Ä–∏–∫–ª—é—á–∏.");
    }

    public void doReasoning() {
        addBehaviour(new OneShotBehaviour() {
            @Override
            public void action() {
                runReasoning();
            }
        });
    }

    private void runReasoning() {
        PlantService plantService = SpringContextBridge.getBean(PlantService.class);
        Optional<PlantEntity> plantOpt = plantService.getPlantWithSymptoms(plantId);

        if (plantOpt.isEmpty()) {
            System.err.println("‚ùå –ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –∑–∞—Ä–µ–¥–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ: " + plantName);
            return;
        }

        PlantEntity plant = plantOpt.get();
        List<String> plantSymptoms = plant.getSymptomsStrings();

        List<ReasoningBlock> allAdvice = ontology.getAdviceForPlantIndividual(plantType);

        // Environmental –ø—Ä–∏—á–∏–Ω–∏
        Set<String> environmentalCauses = Set.of(
                "HighHumidity",
                "HighLight",
                "HighTemperature",
                "LowHumidity",
                "LowLight",
                "LowTemperature",
                "Overwatering",
                "WaterDeficiency"
        );

        // –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ —Å–∏–º–ø—Ç–æ–º–∏
        List<ReasoningBlock> filtered = allAdvice.stream()
                .filter(block -> block.getSymptoms().stream()
                        .anyMatch(symptom -> plantSymptoms.stream().anyMatch(symptom::endsWith)))
                .collect(Collectors.toList());

        // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–∞–Ω–µ, –∞–∫–æ –∏–º–∞ –≤—ä–Ω—à–µ–Ω —Ä–∏—Å–∫
        if (externalRiskDetected) {
            System.out.println("üå°Ô∏è –í—ä–Ω—à–µ–Ω —Ä–∏—Å–∫ –∑–∞—Å–µ—á–µ–Ω ‚Äì –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ environmental –ø—Ä–∏—á–∏–Ω–∏...");
            filtered = filtered.stream()
                    .sorted((b1, b2) -> {
                        boolean b1IsEnv = environmentalCauses.contains(b1.getCause());
                        boolean b2IsEnv = environmentalCauses.contains(b2.getCause());

                        System.out.println("üîç –°—Ä–∞–≤–Ω—è–≤–∞–º:");
                        System.out.println("  b1: " + b1.getCause() + " (environmental? " + b1IsEnv + ")");
                        System.out.println("  b2: " + b2.getCause() + " (environmental? " + b2IsEnv + ")");

                        int result = Boolean.compare(!b1IsEnv, !b2IsEnv);
                        if (result < 0) {
                            System.out.println("üëâ " + b1.getCause() + " —â–µ –±—ä–¥–µ –ø—Ä–µ–¥–∏ " + b2.getCause());
                        } else if (result > 0) {
                            System.out.println("üëâ " + b2.getCause() + " —â–µ –±—ä–¥–µ –ø—Ä–µ–¥–∏ " + b1.getCause());
                        } else {
                            System.out.println("üëâ –ë–µ–∑ –ø—Ä–æ–º—è–Ω–∞ –≤ —Ä–µ–¥–∞.");
                        }

                        return result;
                    })
                    .collect(Collectors.toList());
        }

        this.latestAdvice = filtered;

        System.out.println("üí° Reasoning –∑–∞ " + plantName + " ‚Äì —Ä–µ–∑—É–ª—Ç–∞—Ç–∏: " + latestAdvice.size());
        for (ReasoningBlock block : latestAdvice) {
            System.out.println("  –ü—Ä–∏—á–∏–Ω–∞: " + block.getCause());
            System.out.println("  –°–∏–º–ø—Ç–æ–º–∏: " + block.getSymptoms());
            System.out.println("  –ì—Ä–∏–∂–∏: " + block.getActions());
        }

        reasoningCompleted = true;
    }

    public List<ReasoningBlock> getLatestAdvice() {
        return latestAdvice;
    }
}
