package com.example.smart_garden.agents;

import com.example.smart_garden.config.SpringContextBridge;
import com.example.smart_garden.entities.PlantEntity;
import com.example.smart_garden.ontology.PlantOntology;
import com.example.smart_garden.service.AgentManagerService;
import com.example.smart_garden.service.PlantService;
import com.example.smart_garden.service.ReasoningBlock;
import jade.core.Agent;
import jade.core.behaviours.OneShotBehaviour;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class PlantAgent extends Agent {

    private PlantOntology ontology;
    private String plantName;
    private String plantType;
    private Long plantId;
    private List<ReasoningBlock> latestAdvice = new ArrayList<>();

    private volatile boolean reasoningCompleted = false; // üîí –∑–∞ –Ω–∏—à–∫–∏

    public boolean isReasoningCompleted() {
        return reasoningCompleted;
    }

    public void resetReasoningFlag() {
        this.reasoningCompleted = false;
    }

    @Override
    protected void setup() {
        Object[] args = getArguments();
        if (args == null || args.length < 2) {
            System.err.println("‚ùå PlantAgent: –õ–∏–ø—Å–≤–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (–∏–º–µ –∏ —Ç–∏–ø)!");
            doDelete();
            return;
        }

        this.plantId = (Long) args[0];
        this.plantName = (String) args[1];
        this.plantType = (String) args[2];

        this.ontology = SpringContextBridge.getBean(PlantOntology.class);

        // üü¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–µ –≤ –º–µ–Ω–∏–¥–∂—ä—Ä–∞
        AgentManagerService manager = SpringContextBridge.getBean(AgentManagerService.class);
        manager.registerPlantAgent(plantName, this);

        System.out.println("‚úÖ PlantAgent —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ: " + plantName);

        // –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ reasoning –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ
        addBehaviour(new OneShotBehaviour() {
            @Override
            public void action() {
                runReasoning();
            }
        });
    }

    @Override
    protected void takeDown() {
        SpringContextBridge.getBean(AgentManagerService.class).unregisterPlantAgent(plantName);
        System.out.println("üõë PlantAgent –∑–∞ " + plantName + " –ø—Ä–∏–∫–ª—é—á–∏.");
    }

    // üîÅ –ò–∑–≤–∏–∫–∞–π reasoning –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∏–ª–∏ –¥—Ä—É–≥–æ –º—è—Å—Ç–æ
    public void doReasoning() {
        addBehaviour(new OneShotBehaviour() {
            @Override
            public void action() {
                runReasoning();
            }
        });
    }

    // ü§ñ –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ reasoning –ª–æ–≥–∏–∫–∞
    private void runReasoning() {
        // –í–∑–µ–º–∏ PlantEntity –æ—Ç –∏–º–µ—Ç–æ
        PlantService plantService = SpringContextBridge.getBean(PlantService.class);
        Optional<PlantEntity> plantOpt = plantService.getPlantWithSymptoms(plantId);


        if (plantOpt.isEmpty()) {
            System.err.println("‚ùå –ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –∑–∞—Ä–µ–¥–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ: " + plantName);
            return;
        }

        PlantEntity plant = plantOpt.get();


        // –í–∑–µ–º–∏ –≤—Å–∏—á–∫–∏ reasoning –±–ª–æ–∫–æ–≤–µ –∑–∞ —Ç–∏–ø–∞
        List<ReasoningBlock> allAdvice = ontology.getAdviceForPlantIndividual(plantType); // –∏–ª–∏ –ø–æ —Ç–∏–ø, –∞–∫–æ —Å–µ –Ω–∞–ª–∞–≥–∞

        // –§–∏–ª—Ç—Ä–∏—Ä–∞–π —Å–ø—Ä—è–º–æ —Å–∏–º–ø—Ç–æ–º–∏—Ç–µ
        latestAdvice = allAdvice.stream()
                .filter(block -> block.getSymptoms().stream()
                        .anyMatch(symptom ->
                                plant.getSymptomsStrings().stream().anyMatch(symptom::endsWith)))
                .toList();

        System.out.println("üí° Reasoning –∑–∞ " + plantName + " ‚Äì —Ä–µ–∑—É–ª—Ç–∞—Ç–∏: " + latestAdvice.size());

        for (ReasoningBlock block : latestAdvice) {
            System.out.println("  –ü—Ä–∏—á–∏–Ω–∞: " + block.getCause());
            System.out.println("  –°–∏–º–ø—Ç–æ–º–∏: " + block.getSymptoms());
            System.out.println("  –ì—Ä–∏–∂–∏: " + block.getActions());
        }

        reasoningCompleted = true;
    }


    public List<ReasoningBlock> getLatestAdvice() {
        return latestAdvice;
    }

}
